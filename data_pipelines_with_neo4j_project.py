# -*- coding: utf-8 -*-
"""Data Pipelines with neo4j project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ziBbuYprnYeVdy5SbVhG3un_xZwfk9LK
"""

# importing neo4j drive
!pip install neo4j

# Import required libraries
from neo4j import GraphDatabase
import pandas as pd
import psycopg2


# Define Neo4j connection details
neo4j_uri = "neo4j+s://1b6a5e1a.databases.neo4j.io"
neo4j_user = "neo4j"
neo4j_password = "3lpAlcg-pepWRy5RetKXdfVHDFDYbgNzX94CYTRGd_0"
driver = GraphDatabase.driver(neo4j_uri, auth=(neo4j_user, neo4j_password))


# Define Postgres connection details
pg_host = "35.233.221.160"
pg_database = "mydbs1"
pg_user = "studentj"
pg_password = "minimum7467!"


# Define Neo4j query to extract data
neo4j_query = "MATCH (c:Customer)-[r:SUBSCRIBES]->(s:Service) RETURN c.id AS customer_id, s.id AS service_id, r.subscription_id AS subscription_id, r.start_date AS start_date, r.end_date AS end_date, r.price AS price"


# Define function to extract data from Neo4j and return a Pandas DataFrame
def extract_data():
  with driver.session() as session:
    result = session.run(neo4j_query)
    data = [record for record in result]
    return data


# Define function to transform data
def transform_data(data):
  df = pd.DataFrame(data)
  # Convert date fields to datetime objects
  df["start_date"] = pd.to_datetime(df["start_date"])
  df['end_date'] = pd.to_datetime(df['end_date'])

  # Remove null values
  df = df.dropna()
  
  return df

# Define function to load data into Postgres
def load_data(df):
  # Connect to Postgres
  conn = psycopg2.connect(host=pg_host, database=pg_database, user=pg_user, password=pg_password)
  # Create table if it doesn't exist
  with conn.cursor() as cursor:
    cursor.execute("""
            CREATE TABLE IF NOT EXISTS telecom_data (
            customer_id INTEGER,
            subscription_id INTEGER,
            service_id INTEGER,
            start_date DATE,
            end_date DATE,
            price FLOAT
        )
        """)
    # Insert data into table
    insert_query = f"INSERT INTO subscriptions (customer_id, subscription_id, service_id, start_date, end_date, price) VALUES ({row['customer_id']}, {row['subscription_id']}, {row['service_id']}, '{row['start_date'].date()}', '{row['end_date'].date()}', {row['price']})"

    for index, row in df.iterrows():
      cursor.execute(insert_query)
    
    conn.commit()
    conn.close()


# Define main function
def main():
  # Extract data from Neo4j
  extracted_df = extract_data()
  # Transform data using Pandas
  transformed_df = transform_data(extracted_df)
  # Load data into Postgres
  load_data(transformed_df)
    

# Call main function
if __name__ == "__main__":
  main()